
# List serial numbers of all connected devices, one per line
android_serials() {
  adb devices | {
    read header
    while read serial rest
    do
      test -n "$serial" && echo "$serial"
    done
  }
}


# Fetch one or more files from a connected android phone.  Outputs inprogress filenames retrieved on stdout.
# If "delete" is passed, the files will be deleted from the device.
# Usage: android_fetch <module> <device serial> <label> <path> <filename regexp> <compression> [delete]
android_fetch() {
  module="$1"
  device="$2"
  label="$3"
  path="$4"
  regexp="$5"
  compression="$6"
  delete="$7"

  adb -s "$device" ls "$path" | while read permissions size timestamp file
  do
    if test "$file" = ".." -o "$file" = "."; then continue; fi
    if ! echo -n "$file" | grep -q "$regexp"; then continue; fi
    (
      orig_permissions=$((0x$permissions))
      permissions=$(printf %#o $((orig_permissions & 07777)))
      size=$((0x$size))
      timestamp=$((0x$timestamp))
      file2="$LOGDIR/$(get_logfilename_inprogress "$module" "$(format_date "@$timestamp")" "$device" "$label" "$compression" "${file##*.}")"
      flock -n 9 &&
      test "$(adb -s "$device" ls "$path" | grep -F " $file" | grep " $file\$")" = "$(printf '%08x %08x %08x %s' "$orig_permissions" "$size" "$timestamp" "$file")" &&
      flock "$LOGDIR/.adb_$device"_lock -c "adb -s '$device' pull '$path/$file' '$file2'" 1>&2 &&
      touch -d "@$timestamp" "$file2" &&
      if ! test "$(adb -s "$device" ls "$path" | grep -F " $file" | grep " $file\$" | { read permissions size timestamp file; echo $((0x$size)); })" = "$(stat -c %s "$file2")"
      then
        rm "$file2"
        false
        continue
      fi &&
      if test "$delete" = "delete"; then adb -s "$device" shell rm "'$path"/"$file'" </dev/null; fi &&
      echo "$file2" ||
      { rm "$file2"; false; }
    ) 9> "$LOGDIR/.adb_${device}_${file}_lock" &&
    rm "$LOGDIR/.adb_${device}_${file}_lock"
  done
}


# Fetch one or more files from all connected android phones.  Outputs inprogress filenames retrieved on stdout.
# If "delete" is passed, the files will be deleted from the device.
# Files are matched with a regexp.  To match an exact filename, provide the string "^filename\$"
# Usage: android_fetchall <module> <label> <path> <regexp> <compression> [delete]
android_fetchall() {
  module="$1"
  shift
  android_serials | {
    while read serial
    do
      android_fetch "$module" "$serial" "$@" &
    done
    wait
  }
}


# Fetch a bugreport file from all connected android phone.  Includes battery
# statistics which may be viewed with google's battery historian.
# Outputs inprogress filenames retrieved on stdout.
# Usage: android_bugreport <module>
android_bugreportall() {
  module="$1"
  compression="raw"

  android_serials | {
    while read device
    do
      (
        file="$LOGDIR"/"$(get_logfilename_inprogress "$module" "$(format_date now)" "$device" bugreport "$compression" "txt")"
        flock -n 9 &&
        if adb -s "$device" bugreport > "$file" 
        then
          echo "$file"
        else
          rm "$file"
        fi
      ) 9> "$LOGDIR/.adb_${device}_bugreport_lock" &
    done
    wait
  }
}

ADB_ROOT_MODE=none
ADB_ROOT_NC_PORT=41153

# Succeeds if root access is available
adb_check_root() {
  device="$1"
  status="$(adb_sh_root "$device" 'test -w /dev; echo $?' | tr -d '\r')"
  test "$status" = "0"
}

# Tries to make root access available, if needed
adb_ensure_root() {
  device="$1"
  if adb_check_root "$device"; then return 0; fi

  ADB_ROOT_MODE=su-nc
  if adb_check_root "$device"; then return 0; fi

  if adb -s "$device" root
  then
    ADB_ROOT_MODE=adb-root
    if adb_check_root "$device"; then return 0; fi
  fi

  while ! adb shell true
  do 
    # for some reason adb root failing makes adb barf for a bit
    sleep 1
  done

  if adb -s "$device" shell busybox nc | grep -q 'Usage: nc'
  then
    sustatus="$(adb -s "$device" shell 'su -v; echo $?' | tail -n 1 | tr -d '\r')"
    if test "$sustatus" = "0"
    then
      fifo=$(mktemp)
      rm $fifo; mkfifo $fifo
      adb -s "$device" shell 'su -c "nc -vlk -p '$ADB_ROOT_NC_PORT' -s 127.0.0.1 -e sh"' >$fifo&
      read line <$fifo
      ADB_ROOT_MODE=su-nc
      if adb_check_root "$device"; then return 0; fi
    fi
  fi
  
  echo "Failed to acquire root." 1>&2
  false
}

# Execute a shell command as root
adb_sh_root() {
  device="$1"
  shift 1
  case "$ADB_ROOT_MODE" in
  su-nc)
    adb -s "$device" shell 'echo '"'$*'"' | nc 127.0.0.1' $ADB_ROOT_NC_PORT
    ;;
  adb-root)
    adb -s "$device" shell "$@"
    ;;
  esac
}

# Download a block device image as root
adb_image_blockdev() {
  device="$1"
  dev="$2"
  output="$3"
  tempfile="$(mktemp)"
  
  size=$(adb -s "$device" shell cat /sys/class/block/$dev/size | tr -d '\r')
  blocksperchunk=$((2048*64))
  
  adb_ensure_root "$device" || return 1
  
  offset=0
  while test "$offset" -lt "$size"
  do

    chunkfile="$dev"_"$offset"_of_"$size"
    adb_sh_root "$device" "dd if=/dev/block/$dev skip=$offset count=$blocksperchunk of=/dev/$chunkfile; chmod 644 /dev/$chunkfile"
    adb -s "$device" pull /dev/$chunkfile "$tempfile"
    dd if="$tempfile" of="$output" seek="$offset" count="$blocksperchunk" status=none
    rm "$tempfile"
    adb_sh_root "$device" "rm /dev/$chunkfile"

    offset=$((offset + blocksperchunk))

    if test "$((offset + blocksperchunk))" -gt "$size"
    then
      blocksperchunk=$((size - offset))
    fi
  done
}
