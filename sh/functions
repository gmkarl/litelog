# this should already have been set
# LITELOGDIR="${LITELOGDIR:-/usr/lib/litelog}"

# user to run services as, should have write access to LOGDIR
LITELOGUSER="${LITELOGUSER:-$USER}"

# path in which logs are stored
LOGDIR="${LOGDIR:-/var/log/litelog}"

# path in which temporary files are stored
TMPDIR="${TMPDIR:-$(dirname $(mktemp tmp.XXXXXXXXXX -ut))}"

# name of system, to label logs
HOSTNAME="${HOSTNAME:-$(hostname)}"

# duration at which to open a new log
ROTATE_SECONDS=$((${ROTATE_SECONDS:- 60 * 60 * 2 }))

# size at which to open a new log
ROTATE_BYTES=$((${ROTATE_BYTES:- 16 * 1024 * 1024 * 1024 }))

# number of bytes of space to keep free on partition containing $LOGDIR
TIGHT_SPACE_BYTES=$((${TIGHT_SPACE_BYTES:- ROTATE_BYTES * 3 }))

# date format for logfiles, strftime format
DATE_FORMAT="${DATE_FORMAT:-%Y-%m-%dT%H:%M:%S%z}"

# name to give logs that are writing and open, printf format
#   %s replaced with $module $date $hostname $source $compression $extension
LOGFILENAME_INPROGRESS="tmp/%s_%s_%s_%s_%s.%s"

# name to give finished data, printf format
#   %s replaced with $module $date $hostname $source $compression $extension
LOGFILENAME="%s/%s_%s_%s_%s.%s"

# file format for soapy_power logs
SOAPY_POWER_FMT="${SOAPY_POWER_FMT:-soapy_power_bin}"

# soapy_power command line arguments
SOAPY_POWER_ARGS="${SOAPY_POWER_ARGS:--f 24M:1764M -B 1 -t 60 -g 49.60}"

# Set to generate raw radio logs.  See rtl-sdr/README.md
RADIORAW="${RADIORAW}"

# Set to a remote repo for git-annex to move files to when space is tight
GITANNEX_MOVETO="${GITANNEX_MOVETO}"

VIDEO_BACKEND=${VIDEO_BACKEND:-gstreamer}
VCODEC=${VCODEC:-vp9}

AUDIO_BACKEND=${AUDIO_BACKEND:-gstreamer}
ACODEC=${ACODEC:-opus}

# a binary in the environment that compresses stdin to stdout and expects -d to decompress
TEXT_CODEC=${TEXT_CODEC:-bzip2}
TEXT_CODEC_EXT=${TEXT_CODEC_EXT:-bz2}
TEXT_CODEC_ARG=${TEXT_CODEC_ARG:--9}

# for comparing file contents
HASH=sha256sum

## convenience for sh group
LITELOGDIRSH="${LITELOGDIR}/sh"
MODULEDIR="${LITELOGDIRSH}/${MODULE}"

format_date() {
	date +"$DATE_FORMAT" -d "$*"
}

get_logfilename() {
	_template="$1"; _perms="$2";_module="$3"; _date="$4"; _hostname="$5"; _source="$6"; _compression="$7"; _extension="$8"
	_fname="$(printf "$_template" "$_module" "$_date" "$_hostname" "$_source" "$_compression" "$_extension")"
	_dir="${_fname%/*}"
	if test "$_dir" != "$_fname"
	then
		mkdir -p "${LOGDIR}/${_dir}"
		chown "$LITELOGUSER" "${LOGDIR}/${_dir}"
		chmod $_perms "${LOGDIR}/${_dir}"
	fi
	echo "$_fname"
}

get_logfilename_inprogress() {
	get_logfilename "$LOGFILENAME_INPROGRESS" 777 "$@"
}

get_logfilename_final() {
	get_logfilename "$LOGFILENAME" 755 "$@"
}

get_logfilename_component() {
	_idx=$(($2))
	_rem='\(.*\)'
	_logfilename_inprogress_re="$(printf "$(echo "$LOGFILENAME_INPROGRESS" | sed 's/\./\\./g')" "$_rem" "$_rem" "$_rem" "$_rem" "$_rem" "$_rem")"
	_logfilename_final_re="$(printf "$(echo "$LOGFILENAME" | sed 's/\./\\./g')" "$_rem" "$_rem" "$_rem" "$_rem" "$_rem" "$_rem")"
	
	echo "$1" | sed "s!^$_logfilename_inprogress_re\$!\\$_idx!; s!^$_logfilename_final_re\$!\\$_idx!;"
}

get_logfilename_components() {
	_logfilename_full="$*"
	_logfilename="${_logfilename_full#$LOGDIR}"
	_logfilename="${_logfilename#/}"
	rPREFIX="${_logfilename_full%$_logfilename}"
	rMODULE="$(get_logfilename_component "$_logfilename" 1)"
	rDATE="$(get_logfilename_component "$_logfilename" 2)"
	rHOSTNAME="$(get_logfilename_component "$_logfilename" 3)"
	rSOURCE="$(get_logfilename_component "$_logfilename" 4)"
	rCOMPRESSION="$(get_logfilename_component "$_logfilename" 5)"
	rEXTENSION="$(get_logfilename_component "$_logfilename" 6)"
}

finalize_inprogress_logfile() {
	get_logfilename_components "$*"
	rFINALIZED="$rPREFIX$(get_logfilename_final "$rMODULE" "$rDATE" "$rHOSTNAME" "$rSOURCE" "$rCOMPRESSION" "$rEXTENSION")"
	mv "$*" "$rFINALIZED"
}

free_bytes() {
	echo $(($(stat --file-system --format="%a * %S" "$LOGDIR")))
}

size_of() {
	stat --format="%s" "$@"
}

space_is_tight() {
	test $(free_bytes) -lt $TIGHT_SPACE_BYTES
}

# true if the two provided files have durations similar within epsilon milliseconds
# Usage: duration_is_same_epsilon <path_one> <path_two> <epsilon>
# also true if path_one has a zero duration, assuming transcoding a damaged file
duration_is_same_epsilon() {
	duration1=$(duration "$1")
	duration2=$(duration "$2")
	epsilon=$(($3))
	delta=$((duration1 - duration2))
	test $duration1 -eq 0 -o \( $delta -ge -$epsilon -a $delta -le $epsilon \) 
}

# make sure space is kept free
ensure_space_free() {
	while space_is_tight
	do
		# for video, deletes an already-compressed file
		ls -d "$LITELOGDIRSH"/*/free_space.sh | sort -R | {
			read free_space_script
			module=${free_space_script%/*}
			module=${module##*/}
			echo "Drive space is getting tight, asking $module to delete an unneeded file ..."
			/bin/sh "$free_space_script"
		} || for free_space_script in "$LITELOGDIRSH"/*/free_space.sh
		# in case one free script failed, try all of them
		do
			/bin/sh "$free_space_script" || continue # try next script
			continue 2 # script succeded, check for free space again
		done
		# no scripts succeeded
		# TODO: allow a config setting that starts removing objects from git history
		echo "NO MODULE ABLE TO FREE MORE SPACE"
		return 1
	done
}

# continue only when space is free, delaying an hour between checks if not
# may optionally be provided a command to run instead of waiting
wait_for_space_free() {
  while ! ensure_space_free
  do
  	echo "Space filled on $LOGDIR ... will try again in an hour."
  
    if test -n "$*"
    then
  		"$@"
  	else
  		sleep $((60*60))
  	fi
  done
}

. "$LITELOGDIRSH"/video/${VIDEO_BACKEND}_functions
