# this should already have been set
# LITELOGDIR="${LITELOGDIR:-/usr/lib/litelog}"

# path in which logs are stored
LOGDIR="${LOGDIR:-/var/log/litelog}"

# name of system, to label logs
HOSTNAME="${HOSTNAME:-$(hostname)}"

# for duration-based logs, duration at which to open a new log
ROTATE_SECONDS=$((${ROTATE_SECONDS:- 60 * 60 * 2 }))

# for size-based logs, size at which to open a new log (not used)
ROTATE_BYTES=$((${ROTATE_BYTES:- 64 * 1024 * 1024 * 1024 }))

# number of bytes of space to keep free on partition containing $LOGDIR
TIGHT_SPACE_BYTES=$((${TIGHT_SPACE_BYTES:- ROTATE_BYTES * 3 }))

# name to give logfiles, strftime format (sh module authors can use $(date +"$LOGFILE_PREFIX") )
LOGFILE_PREFIX="${LOGFILE_PREFIX:-%Y-%m-%dT%H:%M:%S%z_$HOSTNAME}"

VIDEO_BACKEND=${VIDEO_BACKEND:-ffmpeg}
VCODEC=${VCODEC:-h264}

AUDIO_BACKEND=${AUDIO_BACKEND:-ffmpeg}
ACODEC=${ACODEC:-opus}


## convenience for sh group
LITELOGDIR="${LITELOGDIR}/sh"
MODULEDIR="${LITELOGDIR}/${MODULE}"
MODULELOGDIR="${LOGDIR}/${MODULE}"

free_bytes() {
  echo $(($(stat --file-system --format="%a * %S" "$LOGDIR")))
}

size_of() {
  stat --format="%s" "$@"
}

space_is_tight() {
  test $(free_bytes) -lt $TIGHT_SPACE_BYTES
}

# true if the two provided files have durations similar within epsilon milliseconds
# Usage: duration_is_same_epsilon <path_one> <path_two> <epsilon>
# also true if path_one has a zero duration, assuming transcoding a damaged file
duration_is_same_epsilon() {
  duration1=$(duration "$1")
  duration2=$(duration "$2")
  epsilon=$(($3))
  delta=$((duration1 - duration2))
  test $duration1 -eq 0 -o \( $delta -ge -$epsilon -a $delta -le $epsilon \) 
}

# make sure space is kept free
ensure_space_free() {
  while space_is_tight
  do
    # for video, deletes an already-compressed file
    ls -d "$LITELOGDIR"/*/free_space.sh | sort -R | {
      read free_space_script
      module=${free_space_script%/*}
      module=${module##*/}
      echo "Drive space is getting tight, asking $module to delete an unneeded file ..."
      /bin/sh "$free_space_script"
    } || for free_space_script in "$LITELOGDIR"/*/free_space.sh
    # in case one free script failed, try all of them
    do
      /bin/sh "$free_space_script" || continue # try next script
      continue 2 # script succeded, check for free space again
    done
    # no scripts succeeded
    # TODO: allow a config setting that starts removing objects from git history
    echo "NO MODULE ABLE TO FREE MORE SPACE"
    return 1
  done
}

. "$LITELOGDIR"/video/${VIDEO_BACKEND}_functions
