[ ] config 3 categories for git-annex systems: recording, storage, and processing
	[ ] recording is similar to 'source'
		files in tmp are immediately sent to 'processing'
	[ ] processing is similar to 'transfer'
		ALL files in tmp are wanted
		other files are immediately sent to 'storage'
	[ ] storage is similar to 'archive'
		files in tmp are NOT wanted
		ALL other files are wanted
		
[ ] switch to selectable between assistant and webapp
  [x] sysvinit
    [x] get rid of superseded functionality
    [x] provide metadata specifying dependencies between webapp and assistant
    [x] test setup
  [ ] systemd
    [x] test that webapp & assistant perform the watch functionality
  	[x] get rid of superseded functionality
  		[x] get rid of watch
  		[x] get rid of fsck
  		[x] get rid of sync
    [x] provide metadata specifying dependencies between webapp and assistant
    [ ] test setup
	[ ] ensure free_space works with assistant

[ ] re-enable video recording in a sustainable way

[ ] file (for given recording device) with most recent timestamp, if timestamp is recent, should not be compressed, in case it is further updated

[ ] implement syslog storage.  config systemd to forward journal to syslog, or
    additionally read its logs, perhaps with journalctl --forward
    the immediate purpose for this is to notify the user when devices are
    connected which cannot be used (otherwise they may think they are
    recording when they are not)
      systemd forwards syslog messages to the socket /run/systemd/journal/syslog
    I think a nice way to do this is to make a fifo that the log messages are
    read from.  most sysloggers can write to a fifo.  dd can read only cached
    data by using iflag=nonblock.  the fifo can be kept open by a wrapping
    reader which spawns multiple dds if needed.
    [x] check if rsyslog reopens a fifo if it is closed by the reading process
        do this by adding '*.* |/tmp/rsyslog-all.fifo'  into /etc/rsyslog.d
        It does!  We can simply dd iflag=nonblock the fifo repeatedly.

== low priority ==
[ ] hunt down creation of .gitignoree file
[ ] hunt down clobbering of existing .gitignore/.gitattributes files
[ ] fix bug generating spurious '*' files
[ ] add defaults file
[ ] publicize myself (wiki/blog)
  [ ] branchable.com
  ( ) freenet
  ( ) ipfs
  ( ) public tahoe-lafs
[ ] syslog
[ ] rtl-sdr
[ ] get litelog running on android and on ovh
[ ] fix XO cameras

== complete ==
[x] specify user to run services as; this allows to specify
    whose ssh configuration is used and what the owner of the files should be
    could also (more messily?) include ssh keys in repo ...
    might not matter too much, most users won't use ssh
    still is better practice to have a user and not root run services
  ^-- This will flush out my annex implementation on ovh, where there is a
      dedicated annex user, and I would like the assistant to run all
      the time.
      If the annex user were the litelog user, litelog could have a unified
      startup script to manage this, and litelogs infrastructure be used on
      ovh.  This would also help later for adding server logs, internet cameras,
      etc., and ovh could do video compression.

      So, steps to this:
      [x] change litelog to run as a given user
        -> how will it manage its install?
          *** For systemd, it could install as the current user, for simplicity.  Systemd allows user-specific services.
              Perhaps this could be default behavior if not run as root.
	  *** no, i read that user-specific services don't start at boot.
              it installs as current user by default and can be configured
        [ ] well, its home folder will probably be either the log data folder
           or the log binaries folder (or no home)
       It's not complex:
         1. a user runs all the services rather than root.  This user owns all the files that need to be written to and can read all the files that don't.
         2. an additional service is added to run the git-annex assistant.
         3. this setup is used on ovh
       1 is roughly blocking 3.
       We'll need a home folder in older to have an ssh configuration for
       communicating between systems.  Or perhaps ssh can use a custom config dir ...
          -> ssh can be passed -F to use a different per-user configuration file than ~/.ssh/config
          -> git can have GIT_SSH_COMMAND in the environment set to ssh with additional parameters
[x] systemd services aren't getting configured
[x] git annex add isn't happening
    [x] switch to git annex watch
[x] fix that hostname is output twice in filename
[x] files are not getting compressed
[x] fix missing systemd install
	-> this was diskreserve, it was intended to only be run and not installed
