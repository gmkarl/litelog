

Okay, my approach doesn't mesh well with rtl_sdr, but I like my approach.

I'm using udev to trigger systemd services based on device information.  This is nice because each service knows about
its device, and its logs and events can be viewed separately by the user, and the services are automatically started
and stopped when devices are added or removed.

Unfortunately, the rtl_sdr infrastructure uses device ids of their own which are not based on any information specific
to the device, but rather on the order their are returned by the usb api.  Each device does have identifying serial numbers,
though !  Perhaps a solution would be to require that every device has a unique serial number.
If a device is inserted with a non-unique serial number, the software should provide a way for the user to change the
serial number, but not do so unless they specify to.  It is sufficient for now to have the associated service
fail to start...... which could perhaps be done if there were a one-shot wrapper service that launched the service
and failed if it was already running.  Sounds a little too much, though.

Okay, the plan is:
 - serial numbers will identify devices.  Write a very small C program to convert serial numbers to device ids and vice versa, for completion (I could even add this program to rtl_sdr)
 - udev will spawn a service based on serial number

The problem is:
 - how to handle duplicate serial numbers in such a way that the user knows that the device they inserted is not working?

 Udev has the serial number and can launch any script.
 Device has a blue light on it indicating power!  But if I disable the device the user won't be able to change the serial
 number to fix the problem.

 Perhaps add an error log folder to the annex.  Additionally, the service logs should also be in the annex.  These are
 event logs.  They can be stored in the same pattern as other things.  systemd logs are from the systemd module.
 These are systemd event logs and can be text files that are logged.  We'll want a standard way of notifying that they're
 an error (contain interesting/important data) ... metadata isn't standardized yet.  It should be.
